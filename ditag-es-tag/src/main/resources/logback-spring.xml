<?xml version="1.0" encoding="UTF-8" ?>

<configuration>

    <!--<include resource="org/springframework/boot/logging/logback/base.xml"/>-->
    <!-- boldMagenta:粗红-->
    <!--boldYellow:粗黄-->
    <!--boldGreen:粗绿-->
    <!-- cyan:青色 -->
    <!-- white:白色 -->
    <!-- magenta:洋红 -->

    <!-- 日志输出格式【控制台】 [%p][%c][%M][%L] -->
    <!--<property name="consoleLogPattern" value="%date{yyyy-MM-dd HH:mm:ss} | %highlight(%p) | %boldYellow(%c) | %M:%boldGreen(%L) | %m%n"/>-->
    <!--<property name="consoleLogPattern" value="%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"/>-->
    <!--<property name="consoleLogPattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %magenta([%thread]) %customcolor(%-5level) %cyan(%logger{15}) - %msg%n"/>-->
    <property name="consoleLogPattern" value="%white(%date{yyyy-MM-dd HH:mm:ss}) | %highlight(%-5level) | %magenta([%thread]) | %boldYellow(%c) | %M:%boldGreen(%L) | %cyan(%m%n)"/>

    <!-- 日志输出格式【日志文件】 -->
    <property name="fileLogPattern" value="%date{yyyy-MM-dd HH:mm:ss} | %-5level | [%thread] | %c | %M:%L | %m%n"/>

    <!--项目名称-->
    <property name="appName" value="ditag-es-tag"/>

    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别大于等于设置-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${consoleLogPattern}</pattern>
        </encoder>
    </appender>

    <!-- 输出到文件 -->
    <!-- 时间滚动输出 level为 INFO 日志 -->
    <appender name="FILE_INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 忽略ERROR -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>DENY</onMatch>
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <encoder>
            <pattern>${fileLogPattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--滚动策略 每天创建一个文件-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>./logs/${appName}/info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是30，
则只保存最近30天的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除-->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 时间滚动输出 level为 ERROR 日志 -->
    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>${fileLogPattern}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--路径-->
            <fileNamePattern>./logs/${appName}/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
    </appender>

    <!--将日志输出到logstack-->
    <!--<appender name="logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>47.93.173.81:7002</destination>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder">
            <charset>UTF-8</charset>
        </encoder>
        <keepAliveDuration>5 minutes</keepAliveDuration>
    </appender>-->

    <!--<logger>用来设置某一个包或者具体莫一个类的日志打印级别、以及指定<appender>
        <logger>仅有一个name属性，一个可选level和一个可选的addtivity属性-->
    <!--使用mybaits的时候，sql语句是debug下才会打印，而这里我们只配置了info,所以想要查看sql语句，有两种解决方法
        第一种把<root level="info"> 改成 <root level="debug"> 但是会出现很多其他的日志
        第二种就是单独给mapper下目录配置debug模式-->
    <!--root是所有logger的祖先，均继承root，如果某一个自定义的logger没有指定level，就会寻找
    父logger看有没有指定级别，直到找到root。-->

    <!-- 场景设置，开发环境，生产环境，测试环境-->
    <!-- 开发环境：打印控制台-->
    <springProfile name="dev">
        <logger name="io.lettuce.core.protocol" level="ERROR"/>
        <!--root节点是必选节点，用来指定最基础的日志输出级别-->
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="FILE_INFO"/>
            <appender-ref ref="FILE_ERROR"/>
        </root>
    </springProfile>

    <!-- 测试环境：全信息打印-->
    <springProfile name="test">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="FILE_INFO"/>
            <appender-ref ref="FILE_ERROR"/>
        </root>
    </springProfile>

    <!-- 生产环境：输出到文件中-->
    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="FILE_INFO"/>
            <appender-ref ref="FILE_ERROR"/>
        </root>
    </springProfile>

</configuration>